---
import Layout from '../layouts/Layout.astro';
import GuestbookPosts from '../components/GuestbookPosts.astro';
import fetch from 'node-fetch';

interface Author {
  login: string;
  avatarUrl: string;
}

interface Comment {
  author: Author;
  body: string;
  createdAt: string;
}

interface Discussion {
  title: string;
  comments: {
    nodes: Comment[];
  };
}

interface Repository {
  discussion: Discussion;
}

interface GraphQLResponse {
  data?: {
    repository: Repository;
  };
}

async function getGuestbookPosts(): Promise<GraphQLResponse> {
  let results = await fetch('https://api.github.com/graphql', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `bearer ${import.meta.env.GH_API}`,
    },
    body: JSON.stringify({
      query: `{
        repository(owner: "sebdanielsson", name: "sebdanielsson.github.io") {
          discussion(number: 9) {
            title
            comments(last: 100) {
              nodes {
                author {
                  login
                  avatarUrl
                }
                body
                createdAt
              }
            }
          }
        }
      }`,
    }),
  });

  let guestbookPostsResponse: GraphQLResponse = await results.json();
  return guestbookPostsResponse;
}

const guestbookPostsResponse = await getGuestbookPosts();
const guestbookPosts = guestbookPostsResponse.data.repository.discussion.comments.nodes;
---

<Layout>
  <main class="main-width">
    <!-- <h1>Guestbook</h1> -->
    <div class="relative py-6">
      <img src="/img/kilroy.svg" class="mx-auto w-3/4 text-white md:w-1/2" />
      <!-- <button
        type="button"
        class="absolute right-0 ml-auto inline-block -translate-y-[100%] rounded-full bg-[--accent] p-[6px] uppercase leading-normal text-white transition duration-150 ease-in-out hover:bg-[--accent-dark] focus:bg-[--accent-dark] focus:outline-none focus:ring-0 active:bg-[--accent-light]"
      >
        <svg class="size-8" fill="currentColor" viewBox="0 0 1024 1024"
          ><path
            d="M810.666667 554.666667H554.666667v256h-85.333334V554.666667H213.333333v-85.333334h256V213.333333h85.333334v256h256v85.333334z"
          ></path></svg
        >
      </button> -->
      <button
        class="absolute right-0 ml-auto -translate-y-[100%] rounded-xl bg-[--accent] px-4 py-2 text-base font-semibold text-white hover:bg-[--accent-dark]"
      >
        Post
      </button>
    </div>

    <div class="flex flex-col flex-wrap justify-between gap-12 md:flex-row">
      {
        guestbookPosts.map((post) => (
          <div class="post-container flex flex-auto justify-around">
            <GuestbookPosts post={post} />
          </div>
        ))
      }
    </div>
    <style>
      @media screen and (min-width: 768px) {
        .post-container:nth-child(1),
        .post-container:nth-child(2),
        .post-container:nth-child(3) {
          flex-basis: 25%;
        }

        .post-container:nth-child(4) {
          flex-basis: 30%;
          margin-left: 15%;
        }

        .post-container:nth-child(5) {
          flex-basis: 30%;
          margin-right: 15%;
        }
      }
    </style>
    <script is:inline>
      document.querySelectorAll('.post').forEach((post) => {
        const randomDegree = Math.random() * 30 - 15; // Random rotation between -20 and +20 degrees
        post.style.transform = `rotate(${randomDegree}deg)`;
        // Additional positioning code here
      });
    </script>
    <!-- <script
      is:inline
      src="https://giscus.app/client.js"
      data-repo="sebdanielsson/sebdanielsson.github.io"
      data-repo-id="R_kgDOJITMkA"
      data-category="Guestbook"
      data-category-id="DIC_kwDOJITMkM4CcDrE"
      data-mapping="pathname"
      data-strict="0"
      data-reactions-enabled="0"
      data-emit-metadata="0"
      data-input-position="bottom"
      data-theme="dark"
      data-lang="en"
      crossorigin="anonymous"
      async></script> -->
  </main>
</Layout>
