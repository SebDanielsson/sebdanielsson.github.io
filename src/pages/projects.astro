---
import Layout from '../layouts/Layout.astro';
import GitHubRepoCard from '../components/GitHubRepoCard.astro';
import RaycastStoreCard from '../components/RaycastStoreCard.astro';
import DockerHubCard from '../components/DockerHubCard.astro';
import { Octokit } from '@octokit/rest';
import githubRepos from '../data/githubRepos.json';
import raycastExtensions from '../data/raycastExtensions.json';
import dockerHubImages from '../data/dockerHubImages.json';
import fetch from 'node-fetch';
import { parse } from 'node-html-parser';

interface Repo {
  owner: string;
  repo: string;
}

interface DockerHubRepoData {
  user: string;
  name: string;
  namespace: string;
  description: string;
  pull_count: number;
  star_count: number;
  last_updated: string;
  date_registered: string;
}

// Fetch DL count for Raycast extension
async function getRaycastExtensionDL(urlToFetch: string, querySelector: string) {
  const htmlString = await fetch(urlToFetch).then((res) => res.text());
  const root = parse(htmlString);
  const element = root.querySelector(querySelector);
  const text = element.textContent;
  const downloads = text.trim().split(' ')[0];
  return downloads;
}

// Update DL count for Raycast extensions
const querySelector = '.ExtensionPage_installsCount__lbE0o';
const raycastExtensionsWithDL = await Promise.all(
  raycastExtensions.map(async (extension) => {
    const downloads = await getRaycastExtensionDL(extension.store_url, querySelector);
    return {
      ...extension,
      downloads,
    };
  }),
);

// Fetch repo details
const octokit = new Octokit({
  auth: import.meta.env.GH_API,
  userAgent: 'sebdanielsson/sebbo.io',
});

async function getRepoDetails(owner: string, repo: string) {
  try {
    const response = await octokit.repos.get({
      owner,
      repo,
    });

    const repoData = response.data;

    return {
      id: repoData.id,
      owner: repoData.owner.login,
      owner_url: repoData.owner.html_url,
      name: repoData.name,
      full_name: repoData.full_name,
      html_url: repoData.html_url,
      description: repoData.description,
      created_at: repoData.created_at,
      updated_at: repoData.updated_at,
      pushed_at: repoData.pushed_at,
      stars: repoData.stargazers_count,
      language: repoData.language,
      topics: repoData.topics,
      license: repoData.license,
    };
  } catch (error) {
    console.error('Error fetching repository details:', error);
  }
}

// Fetch Docker Hub repo details
async function getDockerHubRepoDetails(
  dockerHubUser: string,
  dockerHubRepo: string,
): Promise<DockerHubRepoData | undefined> {
  try {
    const response = await fetch(
      `https://hub.docker.com/v2/repositories/${dockerHubUser}/${dockerHubRepo}`,
    );
    const repoData = (await response.json()) as DockerHubRepoData;

    return repoData;
  } catch (error) {
    console.error('Error fetching Docker Hub repository details:', error);
  }
}

// List of GitHub repos to fetch
const typedGithubRepos: Repo[] = githubRepos as Repo[];

// Fetch repo details
const repoDetails = await Promise.all(
  typedGithubRepos.map((repo) => getRepoDetails(repo.owner, repo.repo)),
);

// Sort by stars
repoDetails.sort((a, b) => b.stars - a.stars);

// Fetch all details for Docker Hub images
const dockerHubImagesWithDetails = await Promise.all(
  dockerHubImages.map(async (image) => {
    const details = await getDockerHubRepoDetails(image.owner, image.repo);
    return {
      ...image,
      details,
    };
  }),
);
---

<Layout title="Projects">
  <main class="main-width">
    <h1 class="my-0">
      <span class="text-gradient text-gradient-animation">Projects</span>
    </h1>
    <h2>Docker Images</h2>
    <div class="grid grid-cols-1 gap-3 lg:grid-cols-2">
      {dockerHubImagesWithDetails.map((image) => <DockerHubCard image={image} />)}
    </div>
    <h2>Raycast Extensions</h2>
    <div class="grid grid-cols-1 gap-3 lg:grid-cols-2">
      {raycastExtensionsWithDL.map((extension) => <RaycastStoreCard extension={extension} />)}
    </div>
    <h2>GitHub Repos</h2>
    <div class="grid grid-cols-1 gap-3 lg:grid-cols-2">
      {repoDetails.map((repo) => <GitHubRepoCard repo={repo} />)}
    </div>
  </main>
</Layout>
